name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write
  security-events: write

env:
  GO_VERSION: '1.24'
  REGISTRY: ghcr.io

jobs:
  pre-release-checks:
    name: Pre-release Quality Gate
    runs-on: ubuntu-latest
    outputs:
      go-version: ${{ steps.setup.outputs.go-version }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        id: setup
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download and verify dependencies
        run: |
          go mod download
          go mod verify

      - name: Run comprehensive tests
        run: |
          go test -v -race -coverprofile=coverage.out ./...
          go test -v -bench=. -benchmem ./...

      - name: Upload test coverage
        uses: codecov/codecov-action@v5
        if: always()
        with:
          file: ./coverage.out
          flags: unittests
          name: release-coverage
          fail_ci_if_error: false

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: pre-release-checks
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run linter
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=5m --verbose

      - name: Run Go security scanner
        run: |
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          gosec -fmt sarif -out gosec-results.sarif ./...

      - name: Upload gosec results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: gosec-results.sarif
          category: gosec

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    needs: pre-release-checks
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Go vulnerability check
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: trivy

  release:
    name: Build and Release
    runs-on: ubuntu-latest
    needs: [pre-release-checks, code-quality, security-scan]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract release metadata
        id: meta
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "release-name=Ukrainian Voice Transcriber ${VERSION}" >> $GITHUB_OUTPUT

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: release --clean --timeout=60m
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate release summary
        if: always()
        run: |
          echo "## üöÄ Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.meta.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Release Name:** ${{ steps.meta.outputs.release-name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Go Version:** ${{ env.GO_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Multi-platform binaries (Linux, macOS, Windows)" >> $GITHUB_STEP_SUMMARY
          echo "- Docker images published to ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "- Homebrew formula updated" >> $GITHUB_STEP_SUMMARY
          echo "- Linux packages (DEB, RPM, APK)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Links" >> $GITHUB_STEP_SUMMARY
          echo "- [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/${{ steps.meta.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Container Images](${{ env.REGISTRY }}/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY

  post-release:
    name: Post-release Verification
    runs-on: ubuntu-latest
    needs: release
    if: always()
    
    steps:
      - name: Verify release artifacts
        run: |
          echo "Verifying release artifacts..."
          curl -s "https://api.github.com/repos/${{ github.repository }}/releases/tags/${GITHUB_REF#refs/tags/}" | jq -r '.assets[].name'

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Release failed! Check the logs above for details."
          echo "Common issues:"
          echo "- Missing secrets (GITHUB_TOKEN)"
          echo "- GoReleaser configuration errors"
          echo "- Docker registry authentication issues"
          echo "- Test failures or security vulnerabilities"